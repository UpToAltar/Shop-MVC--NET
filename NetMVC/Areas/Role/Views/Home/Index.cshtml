@using Microsoft.AspNetCore.Identity
@using X.PagedList.Mvc.Core
@model NetMVC.Areas.Role.Models.RoleIndexModel
@{
    ViewData["Title"] = "Index";
    Layout = "_LayoutAdmin";
    int number = 0;
    var searchStr = Context.Request.Query["searchString"];
}

<partial name="_StatusMessage"/>
<div class="m-3">
    <h1>LIST ROLE - TOTAL : @Model.totalRoles</h1>
    
    <p>
        <a class="btn btn-primary" asp-action="Create">Create New</a>
        <a class="btn btn-info" asp-action="Create">Add Claims</a>
    </p>
    <table class="table">
        <thead>
        <tr>
            <th>
                #
            </th>
            <th>
                Role Name
            </th>
            <th>
                Claims
            </th>
            <th>
                Features
            </th>
        </tr>
        </thead>
        <tbody>
        @foreach (var item in Model.roles) {
            number++;
            var index = number + (Model.roles.PageNumber - 1) * Model.roles.PageSize;
            <tr>
                <td>
                    @index
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Name)
                </td>
                
                <td>
                    @foreach(var claim in item.Claims)
                    {
                        <span class="badge badge-success">@claim</span><br />
                    }
                </td>
                <td>
                    <a class="btn btn-success" asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                    <a class="btn btn-danger" asp-action="Delete" asp-route-id="@item.Id">Delete</a>
                </td>
            </tr>
        }
        </tbody>
    </table>
    <div class="m-3 d-flex flex-row-reverse">
        @Html.PagedListPager(Model.roles, page => Url.Action("Index", new { page, searchString = searchStr }))
    </div>
</div>
<script src="~/Assets/JsFunction/SearchPagination.js"></script>

